generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id       String @id
  username String @unique
}

model Student {
  id           String       @id
  username     String       @unique
  name         String?
  surname      String?
  email        String       @unique
  phone        String?      @unique
  address      String?
  img          String?
  accountsInst String?      @unique
  sex          UserSex?
  createdAt    DateTime     @default(now())
  platform     String?
  attendence   Attendance[]
  result       Result[]
  assignment   Assignment[]
  class        Class[]
  accounts     Account[] // Ek user ke multiple accounts
}

model Teacher {
  id         String       @id
  username   String       @unique
  name       String
  surname    String
  email      String       @unique
  phone      String       @unique
  address    String
  img        String
  accounts   String       @unique
  sex        UserSex
  createdAt  DateTime     @default(now())
  platform   String
  attendence Attendance[]
  result     Result[]
  assignment Assignment[]
  class      Class[]
}

model Parent {
  id         String       @id
  username   String       @unique
  name       String
  surname    String
  email      String       @unique
  phone      String       @unique
  address    String
  img        String
  accounts   String       @unique
  sex        UserSex
  createdAt  DateTime     @default(now())
  platform   String
  attendence Attendance[]
  result     Result[]
  assignment Assignment[]
  class      Class[]
}

model Grade {
  id    Int @id @default(autoincrement())
  level Int @unique
}

model Class {
  id       Int    @id @default(autoincrement())
  bonus    String
  accounts String
  name     String
  position String

  teacherId String?
  teacher   Teacher? @relation(fields: [teacherId], references: [id])
  studentId String?
  student   Student? @relation(fields: [studentId], references: [id])
  parentId  String?
  parent    Parent?  @relation(fields: [parentId], references: [id])
}

model Subject {
  id   Int    @id @default(autoincrement())
  name String @unique
}

model Clip  { //lesson
  id        Int     @id @default(autoincrement())
  accountId Int
  companyId Int // Company ka reference
  link      String
  views     Int
  previousApprovedViews Int?    // New field to store previously approved views
  status    String  @default("pending")
  account   Account @relation(fields: [accountId], references: [id])
  company   Company @relation(fields: [companyId], references: [id])
}

model Account {// exam
  id               Int     @id @default(autoincrement())
  userId           String
  instagramLink    String
  verificationCode String
  isVerified       Boolean @default(false)
  status           String  @default("Awaiting Bio Update") // Ye field hona chahiye
  user             Student @relation(fields: [userId], references: [id])
  clips            Clip[]
}

model Assignment {
  id          Int    @id @default(autoincrement())
  profileLink String

  teacherId String?
  teacher   Teacher? @relation(fields: [teacherId], references: [id])
  studentId String?
  student   Student? @relation(fields: [studentId], references: [id])
  parentId  String?
  parent    Parent?  @relation(fields: [parentId], references: [id])
}

model Result {
  id                String @id
  socialAccountName String
  nameOfPerson      String
  revenue           String
createdAt         DateTime @default(now())
updatedAt         DateTime @updatedAt
  teacherId String?
  teacher   Teacher? @relation(fields: [teacherId], references: [id])
  studentId String?
  student   Student? @relation(fields: [studentId], references: [id])
  parentId  String?
  parent    Parent?  @relation(fields: [parentId], references: [id])
}

model Attendance {
  id                String   @id
  socialAccountName String
  nameOfPerson      String
  views             String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  teacherId         String?
  teacher           Teacher? @relation(fields: [teacherId], references: [id])
  studentId         String?
  student           Student? @relation(fields: [studentId], references: [id])
  parentId          String?
  parent            Parent?  @relation(fields: [parentId], references: [id])
}

model Announcement {
  id          Int    @id @default(autoincrement())
  userId      String @unique
  title       String
  description String
}

model Company {
  id              Int    @id @default(autoincrement())
  name            String @unique
  rate            String
  image           String
  tutorialVideo   String // Tutorial Drive Link
  thumbnailUrl    String // Thumbnail ka URL
  description     String
  contentLink     String
  clips           Clip[]
}

enum UserSex {
  MALE
  FEMALE
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}

model Settings {
  id    Int    @id @default(autoincrement())
  key   String @unique
  value String
}
