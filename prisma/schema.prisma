generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id       String @id
  username String @unique
}

model Student {
  id               String       @id
  username         String       @unique
  name             String?
  surname          String?
  email            String      
  phone            String?      @unique
  address          String?
  img              String?
  accountsInst     String?      @unique
  sex              UserSex?
  createdAt        DateTime     @default(now())
  platform         String?
  attendence       Attendance[]
  result           Result[]
  assignment       Assignment[]
  class            Class[]
  accounts         Account[]
  userReel         UserReel[]
  userLinks        UserLink[]
  stats            UserStatsRecord[]
  payments         Payment[]
  inviteLinks      InviteLink[]
  sentInvites      Invite[]     @relation("Inviter")
  receivedInvites  Invite[]     @relation("Invited")
  referralEarnings ReferralEarning[] @relation("StudentEarnings")
  referredBy       ReferralEarning[] @relation("StudentReferredBy")
  discordId        String?      @unique
  discordUsername  String?
  discordEmail     String?
  inviteStats     InviteStats?
   signedUpToWebsite Boolean @default(false)
}

model Teacher {
  id         String       @id
  username   String       @unique
  name       String
  surname    String
  email      String       @unique
  phone      String       @unique
  address    String
  img        String
  accounts   String       @unique
  sex        UserSex
  createdAt  DateTime     @default(now())
  platform   String
  attendence Attendance[]
  result     Result[]
  invitation Assignment[]
  class      Class[]
}

model Parent {
  id         String       @id
  username   String       @unique
  name       String
  surname    String
  email      String       @unique
  phone      String       @unique
  address    String
  img        String
  accounts   String       @unique
  sex        UserSex
  createdAt  DateTime     @default(now())
  platform   String
  attendence Attendance[]
  result     Result[]
  assignment Assignment[]
  class      Class[]
}

model Grade {
  id    Int @id @default(autoincrement())
  level Int @unique
}

model Class {
  id       Int    @id @default(autoincrement())
  bonus    String
  accounts String
  name     String
  position String

  teacherId String?
  teacher   Teacher? @relation(fields: [teacherId], references: [id])
  studentId String?
  student   Student? @relation(fields: [studentId], references: [id])
  parentId  String?
  parent    Parent?  @relation(fields: [parentId], references: [id])
}

model Subject {
  id   Int    @id @default(autoincrement())
  name String @unique
}

model Clip {
  id        Int     @id @default(autoincrement())
  accountId Int
  companyId Int
  link      String
  views     Int
  previousApprovedViews Int?
  postedAt              DateTime?
  status    String  @default("pending")
  account   Account @relation(fields: [accountId], references: [id])
  company   Company @relation(fields: [companyId], references: [id])
}

model Account {
  id               Int     @id @default(autoincrement())
  userId           String
  instagramLink    String
  verificationCode String?
  isVerified       Boolean @default(false)
  status           String  @default("Awaiting Bio Update")
  driveLink        String?
  pushedVerificationCode String?
  user             Student @relation(fields: [userId], references: [id])
  clips            Clip[]
}

model Assignment {
  id          Int    @id @default(autoincrement())
  profileLink String

  teacherId String?
  teacher   Teacher? @relation(fields: [teacherId], references: [id])
  studentId String?
  student   Student? @relation(fields: [studentId], references: [id])
  parentId  String?
  parent    Parent?  @relation(fields: [parentId], references: [id])
}

model Result {
  id                String @id
  socialAccountName String
  nameOfPerson      String
  revenue           String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  teacherId String?
  teacher   Teacher? @relation(fields: [teacherId], references: [id])
  studentId String?
  student   Student? @relation(fields: [studentId], references: [id])
  parentId  String?
  parent    Parent?  @relation(fields: [parentId], references: [id])
}

model Attendance {
  id                String   @id
  socialAccountName String
  nameOfPerson      String
  views             String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  teacherId         String?
  teacher           Teacher? @relation(fields: [teacherId], references: [id])
  studentId         String?
  student           Student? @relation(fields: [studentId], references: [id])
  parentId          String?
  parent            Parent?  @relation(fields: [parentId], references: [id])
}

model Announcement {
  id          Int    @id @default(autoincrement())
  userId      String @unique
  title       String
  description String
}

model Company {
  id              Int    @id @default(autoincrement())
  name            String @unique
  rate            String
  image           String
  tutorialVideo   String
  thumbnailUrl    String
  description     String
  contentLink     String
  clips           Clip[]
}

enum UserSex {
  MALE
  FEMALE
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}

model Settings {
  id    Int    @id @default(autoincrement())
  key   String @unique
  value String
}

model UserReel {
  id              Int           @id @default(autoincrement())
  studentId       String
  brandId         Int
  videoUrl        String?
  storageProvider String?
  fileSize        Int?
  status          UploadStatus  @default(PENDING)
  publishedUrl    String?
  views           Int           @default(0)
  viewsLocked     Boolean       @default(false)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  disapprovalMessage String?
  student         Student       @relation(fields: [studentId], references: [id])
  brand           Brand         @relation(fields: [brandId], references: [id])
  reel            ReelStatusHistory[]
}

model Brand {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  description String?
  rate        Float
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  reels       UserReel[]
  userLinks   UserLink[]
}

model UserLink {
  id          Int           @id @default(autoincrement())
  userId      String
  brandId     Int
  link        String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  user        Student       @relation(fields: [userId], references: [id])
  brand       Brand         @relation(fields: [brandId], references: [id])
}

enum UploadStatus {
  PENDING
  APPROVED
  DISAPPROVED
}

model ReelStatusHistory {
  id        Int      @id @default(autoincrement())
  reelId    Int
  status    String
  views     Int
  createdAt DateTime @default(now())
  reel      UserReel @relation(fields: [reelId], references: [id])
}

model UserStatsRecord {
  id                 String    @id @default(uuid())
  userId             String
  username           String
  clerkUserId        String
  clerkUsername      String
  month              String
  uploadersHubViews  Int
  uploadersHubRevenue Float
  editorsHubViews    Int
  editorsHubRevenue  Float
  totalViews         Int
  totalRevenue       Float
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  student            Student   @relation(fields: [userId], references: [id])
  @@unique([userId, month])
}

model Payment {
  id        String   @id @default(uuid())
  studentId String
  month     String
  amount    Float
  createdAt DateTime @default(now())
  student   Student  @relation(fields: [studentId], references: [id])
  @@unique([studentId, month])
}

model InviteLink {
  id          Int      @id @default(autoincrement())
  studentId   String   @unique
  discordId   String?
  inviteLink  String
  inviteCode  String
  threadId    String?  // New column to store private thread ID
  student     Student  @relation(fields: [studentId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Invite {
  id               Int      @id @default(autoincrement())
  inviterId        String
  invitedId        String
  invitedUsername  String?  // Added to store invited user's Discord username
  status           String   @default("pending")
  invitedViews     Int      @default(0)
  createdAt        DateTime @default(now())
  inviter          Student  @relation("Inviter", fields: [inviterId], references: [id])
  invited          Student  @relation("Invited", fields: [invitedId], references: [id])
  @@unique([inviterId, invitedId])
}

model ReferralEarning {
  id            Int      @id @default(autoincrement())
  studentId     String
  invitedId     String
  amount        Float    @default(0.5)
  month         String
  createdAt     DateTime @default(now())
  student       Student  @relation("StudentEarnings", fields: [studentId], references: [id])
  invited       Student  @relation("StudentReferredBy", fields: [invitedId], references: [id])
  @@unique([studentId, invitedId]) // Add this line
}

model InviteStats {
  id         Int      @id @default(autoincrement())
  studentId  String   @unique
  inviteCount Int     @default(0)
  updatedAt  DateTime @updatedAt
  student    Student  @relation(fields: [studentId], references: [id])
}

model InviteTracking {
  id            Int      @id @default(autoincrement())
  inviterId     String   // Discord ID of the inviter (e.g., visionvansh)
  invitedId     String   // Discord ID of the invited user
  invitedUsername String // Discord username of the invited user
  createdAt     DateTime @default(now())
}

model Otp {
  id        String   @id @default(cuid())
  email     String   @unique
  otp       String
  expires   DateTime
  createdAt DateTime @default(now())
}